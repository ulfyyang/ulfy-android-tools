#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import click, click_completion, pyperclip
from android_libs import initializer
from android_libs import layout as layout_lib
from android_libs import cell as cell_lib
from android_libs import view as view_lib
from android_libs import fragment as fragment_lib
from android_libs import activity as activity_lib
from android_libs import container as container_lib
from android_libs import resource

click_completion.init()


@click.group()
def root():
    """
    安卓相关的总命理
    """


###################################### config ##########################################


@root.group()
def config():
    """配置命令组"""


@config.command()
@click.option('--package-name', required=True, help=u'项目的包名')
@click.option('--view-by-id-type', required=True, type=click.Choice(initializer.view_by_id_type), help=u'支持的ViewById类型')
def init(package_name, view_by_id_type):
    """初始化配置文件，不覆盖已存在的配置文件"""
    initializer.AndroidConfig.init_android_config(package_name, view_by_id_type)


@config.command()
def initstandarddir():
    """初始化标准文件夹结构"""
    initializer.AndroidConfig.generate_config_by_default_config().init_standard_directory()


@config.command()
def initstandardfile():
    """初始化标准文件"""
    initializer.AndroidConfig.generate_config_by_default_config().init_standard_file()


###################################### code ##########################################


@root.group()
def code():
    """和代码相关的命令"""


@code.command()
@click.option(
    '-l', '--layout-file-name', required=True,
    type=click.Choice(initializer.AndroidConfig.get_layout_file_names_if_config_exist()),
    help=u'生成viewid信息的布局文件'
)
def showids(layout_file_name):
    """打印布局文件的view声明"""
    ids_code = layout_lib.Layout(layout_file_name).get_view_by_ids()
    pyperclip.copy(ids_code)
    print(ids_code)


class Ids(click.types.StringParamType):
    """用于选择布局文件中的view_id"""
    def complete(self, ctx, incomplete):
        layout_file_name = ctx.__dict__.get('params').get('layout_file_name')
        if layout_file_name:
            choice = [
                view_type.id for view_type in layout_lib.Layout(layout_file_name).get_view_id_map()
                if view_type.id.startswith(incomplete)
            ]
            return choice
        else:
            return []


@code.command()
@click.option('-l', '--layout-file-name', required=True,
              type=click.Choice(initializer.AndroidConfig.get_layout_file_names_if_config_exist()),
              help=u'布局文件')
@click.argument('ids', nargs=-1, type=Ids())
def showclick(layout_file_name, ids):
    """打印布局文件的view单击声明"""
    click_code = layout_lib.Layout(layout_file_name).get_single_clicks(ids)
    pyperclip.copy(click_code)
    print(click_code)


@code.command()
@click.option('-l', '--layout-file-name', required=True,
              type=click.Choice(initializer.AndroidConfig.get_layout_file_names_if_config_exist()),
              help=u'布局文件')
@click.option('-n', '--group-name', required=True, type=click.STRING,
              help=u'组方法的名')
@click.argument('ids', nargs=-1, type=Ids())
def showgroupclick(layout_file_name, group_name, ids):
    """布局文件的view组单击声明"""
    gclick_code = layout_lib.Layout(layout_file_name).get_group_clicks(group_name, ids)
    pyperclip.copy(gclick_code)
    print(gclick_code)


@code.command()
@click.option('-l', '--layout-file-name', required=True,
              type=click.Choice(initializer.AndroidConfig.get_layout_file_names_if_config_exist()),
              help=u'布局文件')
@click.option('-n', '--model-name', required=True,
              type=click.STRING,
              help=u'模型的名称，不添加后缀')
def cell(layout_file_name, model_name):
    """生成Cell配套代码"""
    cell_lib.generate_cell_file(layout_file_name, model_name)
    cell_lib.generate_cm_file(model_name)


@code.command()
@click.option('-l', '--layout-file-name', required=True,
              type=click.Choice(initializer.AndroidConfig.get_layout_file_names_if_config_exist()),
              help=u'布局文件')
@click.option('-n', '--model-name', required=True,
              type=click.STRING,
              help=u'模型的名称，不添加后缀')
def view(layout_file_name, model_name):
    """生成View配套"""
    view_lib.generate_view_file(layout_file_name, model_name)
    view_lib.generate_vm_file(model_name)


@code.command()
@click.option('-l', '--layout-file-name', required=True,
              type=click.Choice(initializer.AndroidConfig.get_layout_file_names_if_config_exist()),
              help=u'布局文件')
@click.option('-n', '--model-name', required=True,
              type=click.STRING,
              help=u'模型的名称，不添加后缀')
def fragment(layout_file_name, model_name):
    """生成Fragment配套"""
    fragment_lib.generate_fragment_file(layout_file_name, model_name)


@code.command()
@click.option('-l', '--layout-file-name', required=True,
              type=click.Choice(initializer.AndroidConfig.get_layout_file_names_if_config_exist()),
              help=u'布局文件')
@click.option('-n', '--model-name', required=True,
              type=click.STRING,
              help=u'模型的名称，不添加后缀')
def activity(layout_file_name, model_name):
    """生成Activity配套"""
    activity_lib.generate_activity_file(layout_file_name, model_name)


@code.command()
@click.option('-t', '--container-type', required=True,
              type=click.Choice(container_lib.container_type),
              help=u'容器类型')
@click.option('-n', '--container-name', required=True, type=click.STRING,
              help=u'Activity的名字，不需要写容器类型后缀')
def container(container_type, container_name):
    """建立一个容器命令，专门创建各种容器"""
    container_lib.generate_container_file(container_type, container_name)


###################################### res ##########################################


@root.group()
def res():
    """和资源相关的命令"""


@res.command()
@click.option('-n', '--layout-file-name', required=True,
              type=click.STRING,
              help=u'布局文件全名，不包含文件后缀，但需要写前缀')
def layout(layout_file_name):
    resource.generate_layout_file(layout_file_name)


@res.command()
@click.option('-t', '--drawable-type', required=True,
              type=click.Choice(resource.drawable_type),
              help=u'资源文件类型')
@click.option('-n', '--drawable-name', required=True,
              type=click.STRING,
              help=u'形状资源名称，不需要添加前缀，但需要写前缀')
def drawable(drawable_type, drawable_name):
    resource.generate_drawable_file(drawable_type, drawable_name)


if __name__ == '__main__':
    root()